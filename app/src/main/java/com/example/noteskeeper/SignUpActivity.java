package com.example.noteskeeper;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

import java.sql.Ref;
import java.util.HashMap;
import java.util.Map;

public class SignUpActivity extends AppCompatActivity {




    Button signupBtn;
    EditText usernameET,emailET,passwrdET,confrmPasswrdET;


    FirebaseAuth fAuth;
   // FirebaseFirestore fStore;
    String usermame,passwrd,cnfrmpasswrd,email;



    public void SignUpInputs(){
        //method to get all inputs
        //usermame= usernameET.getText().toString().trim();
        email=emailET.getText().toString().trim();
        passwrd= passwrdET.getText().toString().trim();
        cnfrmpasswrd= confrmPasswrdET.getText().toString().trim();

    }


    public void FirebaseRegisterUser(){

        fAuth=FirebaseAuth.getInstance();

        SignUpInputs();
        fAuth.createUserWithEmailAndPassword( email, passwrd).addOnSuccessListener(new OnSuccessListener<AuthResult>() {
            @Override
            public void onSuccess(AuthResult authResult) {
                FirebaseUser fuser=FirebaseAuth.getInstance().getCurrentUser();
                DatabaseReference userRef= FirebaseDatabase.getInstance().getReference("User").child(fuser.getUid());


                //check and toast if user created successfully
                Toast.makeText(getApplicationContext(),"Account created successfully",Toast.LENGTH_LONG).show();
                //GET user info of currently registred
                FirebaseUser user=fAuth.getCurrentUser();
                //create a users collection document reference in firestore to store all users details if it is not present.
                // If collection reference exists Also assign the new User`sID generated by firebase during authentication(registration) to the reference.
               // DocumentReference df=fStore.collection("Users").document(user.getUid());
                //now store user data as key value pairs in a hashmap.

                Map<String,Object> UserInfoMap=new HashMap<>();
                String userid=fuser.getUid();
                UserInfoMap.put("id",userid);
                UserInfoMap.put("Username",email);
                UserInfoMap.put("email",email);


                 userRef.setValue(UserInfoMap);


                Intent intent =new Intent(SignUpActivity.this,MainActivity.class);

                startActivity(intent);
                //Use finish 2 Prevent user from going back to signup after creating account
                finish();




            }
        }).addOnFailureListener(new OnFailureListener() {
            @Override
            public void onFailure(@NonNull Exception e) {
                String SignupErr=e.getMessage();

                Toast.makeText(getApplicationContext(),"Account creation Failed because "+SignupErr+" Please try again Later",Toast.LENGTH_LONG).show();

            }
        });






    }



    public Boolean CustomInputValidator(){
        //a custom input validation method
//        if (TextUtils.isEmpty(usernameET.getText().toString())){
//            usernameET.setError("Username can`t be empty");
//            return false;
//        }
        if (TextUtils.isEmpty(emailET.getText().toString())){
            emailET.setError("Email can`t be empty");
            return false;
        }


        if (passwrdET.getText().toString().trim()==null){
            passwrdET.setError("password can`t be empty");
            return false;
        }

        if (confrmPasswrdET.getText().toString().trim()==null){
            confrmPasswrdET.setError("Confirm password can`t be empty");
            return false;
        }


        if (passwrdET.getText().toString().trim().length() < 8) {

            passwrdET.setError("Password should be atleast 8 characters");
            return false;
        }
        if (confrmPasswrdET.getText().toString().trim().length() < 8) {

            confrmPasswrdET.setError("Password should be atleast 8 characters");
            return false;
        }


        if (!((passwrdET.getText().toString().trim()).equals(confrmPasswrdET.getText().toString().trim())) ){
            confrmPasswrdET.setError("Initial password & confirm must be same");
            return false;

        } else{
            return true;
        }



    }









    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_sign_up);



        signupBtn=(Button)findViewById(R.id.btnSignup);
     //   usernameET=(EditText) findViewById(R.id.ETusername);
        passwrdET=(EditText)findViewById(R.id.ETSignupPswd);
        confrmPasswrdET=(EditText)findViewById(R.id.ETConfrmSignupPswd);
        emailET=(EditText)findViewById(R.id.ETSignupEmail);






        signupBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                // CustomInputValidator();
                if (CustomInputValidator()==true){
                    // Call CustomInputValidator to check if inputs are valid;
                    //if inputs valid then REGISTER USER using FirebaseRegisterUser method
                    FirebaseRegisterUser();

                }


            }
        });











    }
}
